# This is free and unencumbered software released into the public domain.

name: Release-plz

permissions:
  pull-requests: write
  contents: write

on:
  push:
    branches:
      - main

jobs:

  release-plz-release:
    name: Release-plz release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run release-plz
        id: release-plz
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Read release output
        env:
          RELEASES: ${{ steps.release-plz.outputs.releases }}
          RELEASES_CREATED: ${{ steps.release-plz.outputs.releases_created }}
        run: |
          set -e
          echo "releases: $RELEASES" # example: [{"package_name":"my-package","prs":[{"html_url":"https://github.com/user/proj/pull/1439","number":1439}],"tag":"v0.1.0","version":"0.1.0"}]
          echo "releases_created: $RELEASES_CREATED" # example: true

          # get the number of releases with jq
          releases_length=$(echo "$RELEASES" | jq 'length')
          echo "releases_length: $releases_length"

          # access the first release with jq
          release_version=$(echo "$RELEASES" | jq -r '.[0].version')
          echo "release_version: $release_version"

          # access the first release with fromJSON. Docs: https://docs.github.com/en/actions/learn-github-actions/expressions
          echo "release_version: ${{ fromJSON(steps.release-plz.outputs.releases)[0].version }}"

          release_tag=$(echo "$RELEASES" | jq -r '.[0].tag')
          echo "release_tag: $release_tag"

          release_package_name=$(echo "$RELEASES" | jq -r '.[0].package_name')
          echo "release_package_name: $release_package_name"

          # print all names of released packages, one per line
          echo "package_names: $(echo "$RELEASES" | jq -r '.[].package_name')"
          # TODO: show how to store this in a variable and iterate over it (maybe an array?). PR welcome!

          # iterate over released packages
          for package_name in $(echo "$RELEASES" | jq -r '.[].package_name'); do
              echo "released $package_name"
          done

  release-plz-pr:
    name: Release-plz PR
    runs-on: ubuntu-latest
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run release-plz
        id: release-plz
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Read release-pr output
        env:
          PRS: ${{ steps.release-plz.outputs.prs }}
          PR: ${{ steps.release-plz.outputs.pr }}
          PRS_CREATED: ${{ steps.release-plz.outputs.prs_created }}
        run: |
          set -e
          echo "prs: $PRS" # example: [{"base_branch":"main","head_branch":"release-plz-2024-05-01T20-38-05Z","html_url":"https://github.com/MarcoIeni/rust-workspace-example/pull/198","number":198}]
          echo "pr: $PR" # example: {"base_branch":"main","head_branch":"release-plz-2024-05-01T20-38-05Z","html_url":"https://github.com/MarcoIeni/rust-workspace-example/pull/198","number":198}
          echo "prs_created: $PRS_CREATED" # example: true

          echo "pr_number: ${{ fromJSON(steps.release-plz.outputs.pr).number }}"
          echo "pr_html_url: ${{ fromJSON(steps.release-plz.outputs.pr).html_url }}"
          echo "pr_head_branch: ${{ fromJSON(steps.release-plz.outputs.pr).head_branch }}"
          echo "pr_base_branch: ${{ fromJSON(steps.release-plz.outputs.pr).base_branch }}"

  release-plz:
    name: Release-plz
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    outputs:
      releases_created: ${{ steps.release-plz.outputs.releases_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@97db979bf844c838b06022f305ca480d01b4d5fe
      - name: Run release-plz
        id: release-plz
        uses: release-plz/action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  upload-assets:
    needs: release-plz
    if: needs.release-plz.outputs.releases_created == 'true' && github.repository_owner == 'code-sleuth'
    permissions:
      contents: write
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-11
          - target: aarch64-pc-windows-msvc
            os: windows-2019
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-11
          - target: x86_64-pc-windows-msvc
            os: windows-2019
          - target: x86_64-unknown-freebsd
            os: ubuntu-22.04
          - target: universal-apple-darwin
            os: macos-11
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@97db979bf844c838b06022f305ca480d01b4d5fe
      - uses: taiki-e/setup-cross-toolchain-action@bdeb9ca6f0f909ea36bb94e1e3ec916b2ceb35fc # v1.26.0
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')
      - uses: taiki-e/install-action@716fb8f756560d6f767650920c8ff20aad9bd48c # v2.47.3
        with:
          tool: cross
        if: contains(matrix.target, '-musl')
      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')
      - uses: taiki-e/upload-rust-binary-action@e7953b6078194a4ae5f5619632e3715db6275561 # v1.24.0
        with:
          bin: release-plz
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

name: Release-plz-tag

permissions:
  pull-requests: write
  contents: write

on:
  push:
    tags:
      - v*
  release:
    types: [created]

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

jobs:

  # release-plz:
  #   name: Release-plz
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pull-requests: write
  #     contents: write
  #   outputs:
  #     releases_created: ${{ steps.release-plz.outputs.releases_created }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Run release-plz
  #       id: release-plz
  #       uses: release-plz/action@v0.5
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  #     - name: Debug Output
  #       run: |
  #         echo "releases_created: ${{ steps.release-plz.outputs.releases_created }}"
  #         echo "All outputs: ${{ toJSON(steps.release-plz.outputs) }}"

  upload-assets:
    # needs: release-plz
    # if: ${{ needs.release-plz.outputs.releases_created == 'true' && startsWith(github.ref, 'refs/tags/v') }}  # Removed other conditions for testing
    permissions:
      contents: write
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-unknown-freebsd
            os: ubuntu-22.04
          # Windows targets
          - target: aarch64-pc-windows-msvc
            os: windows-2022  # Updated to newer Windows
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14  # Apple Silicon runner
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@97db979bf844c838b06022f305ca480d01b4d5fe
      - uses: taiki-e/setup-cross-toolchain-action@bdeb9ca6f0f909ea36bb94e1e3ec916b2ceb35fc # v1.26.0
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')
      - uses: taiki-e/install-action@716fb8f756560d6f767650920c8ff20aad9bd48c # v2.47.3
        with:
          tool: cross
        if: contains(matrix.target, '-musl')
      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')
      - uses: taiki-e/upload-rust-binary-action@e7953b6078194a4ae5f5619632e3715db6275561 # v1.24.0
        with:
          bin: scruitny
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
